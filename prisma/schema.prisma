generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EFMigrationsHistory {
  migration_id    String @id(map: "pk___ef_migrations_history") @db.VarChar(150)
  product_version String @db.VarChar(32)

  @@map("__EFMigrationsHistory")
}

model image_user_vehicle_spotting {
  images_id                 Int
  user_vehicle_spottings_id Int
  images                    images                 @relation(fields: [images_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_image_user_vehicle_spotting_images_images_id")
  user_vehicle_spottings    user_vehicle_spottings @relation(fields: [user_vehicle_spottings_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_image_user_vehicle_spotting_user_vehicle_spottings_user_veh")

  @@id([images_id, user_vehicle_spottings_id], map: "pk_image_user_vehicle_spotting")
  @@index([user_vehicle_spottings_id], map: "ix_image_user_vehicle_spotting_user_vehicle_spottings_id")
}

model images {
  id                          Int                           @id(map: "pk_images") @default(autoincrement())
  guid                        String                        @db.Uuid
  user_id                     Int
  uri                         String?                       @db.VarChar(256)
  is_deleted                  Boolean
  users                       users                         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_images_users_user_id")
  image_user_vehicle_spotting image_user_vehicle_spotting[]

  @@index([user_id], map: "ix_images_user_id")
}

model user_vehicle_spottings {
  id                          Int                           @id(map: "pk_user_vehicle_spottings") @default(autoincrement())
  city                        String?                       @db.VarChar(50)
  latitude                    Float
  longitude                   Float
  is_owner_identified         Boolean                       @default(false)
  is_deleted                  Boolean
  description                 String?                       @db.VarChar(500)
  zip_code                    Int
  comments_json               Json?
  tagged_users_json           Json?
  view_count                  BigInt
  user_id                     Int
  spotted_vehicle_id          Int?
  created_date                DateTime                      @db.Timestamptz(6)
  modified_date               DateTime?                     @db.Timestamptz(6)
  vehicles                    vehicles?                     @relation(fields: [spotted_vehicle_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "fk_user_vehicle_spottings_vehicles_spotted_vehicle_id")
  users                       users                         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_vehicle_spottings_users_user_id")
  image_user_vehicle_spotting image_user_vehicle_spotting[]

  @@index([spotted_vehicle_id], map: "ix_user_vehicle_spottings_spotted_vehicle_id")
  @@index([user_id], map: "ix_user_vehicle_spottings_user_id")
}

model users {
  id                     Int                      @id(map: "pk_users") @default(autoincrement())
  display_name           String?                  @db.VarChar(50)
  email                  String?
  facebook_uri           String?
  last_login             DateTime                 @db.Timestamptz(6)
  instagram_handle       String?                  @db.VarChar(50)
  is_banned              Boolean                  @default(false)
  is_deleted             Boolean
  profile_description    String?                  @db.VarChar(500)
  profile_image_uri      String?                  @db.VarChar(256)
  sid                    String?                  @db.Uuid
  created_date           DateTime                 @db.Timestamptz(6)
  modified_date          DateTime?                @db.Timestamptz(6)
  images                 images[]
  user_vehicle_spottings user_vehicle_spottings[]
  vehicles               vehicles[]
}

model vehicle_manufacturers {
  id             Int              @id(map: "pk_vehicle_manufacturers") @default(autoincrement())
  description    String?          @db.VarChar(500)
  name           String           @db.VarChar(1024)
  is_popular     Boolean
  created_date   DateTime         @db.Timestamptz(6)
  modified_date  DateTime?        @db.Timestamptz(6)
  vehicle_models vehicle_models[]
}

model vehicle_models {
  id                      Int                   @id(map: "pk_vehicle_models") @default(autoincrement())
  name                    String                @db.VarChar(150)
  description             String?               @db.VarChar(500)
  is_popular              Boolean
  vehicle_manufacturer_id Int
  created_date            DateTime              @db.Timestamptz(6)
  modified_date           DateTime?             @db.Timestamptz(6)
  vehicle_manufacturers   vehicle_manufacturers @relation(fields: [vehicle_manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_vehicle_models_vehicle_manufacturers_vehicle_manufacturer_id")
  vehicles                vehicles[]

  @@index([vehicle_manufacturer_id], map: "ix_vehicle_models_vehicle_manufacturer_id")
}

model vehicles {
  id                     Int                      @id(map: "pk_vehicles") @default(autoincrement())
  year                   Int
  is_deleted             Boolean
  description            String?                  @db.VarChar(500)
  status                 Int
  vehicle_model_id       Int
  user_id                Int?
  created_date           DateTime                 @db.Timestamptz(6)
  modified_date          DateTime?                @db.Timestamptz(6)
  users                  users?                   @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "fk_vehicles_users_user_id")
  vehicle_models         vehicle_models           @relation(fields: [vehicle_model_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_vehicles_vehicle_models_vehicle_model_id")
  user_vehicle_spottings user_vehicle_spottings[]

  @@index([user_id], map: "ix_vehicles_user_id")
  @@index([vehicle_model_id], map: "ix_vehicles_vehicle_model_id")
}

enum vehicle_status {
  unclaimed
  pending
  claimed
}
